name: Release

on:
    push:
        tags:
            - "v*"
    workflow_dispatch:

jobs:
    release:
        permissions:
            contents: write # 允许写入内容到仓库
        strategy:
            fail-fast: false # 一个平台失败不影响其他平台
            matrix:
                include:
                    - platform: "macos-latest" # 为 Arm 架构的 Mac (M1 及以上) 构建
                      target: "aarch64-apple-darwin"
                    - platform: "macos-latest" # 为 Intel 架构的 Mac 构建
                      target: "x86_64-apple-darwin"
                    # - platform: "ubuntu-22.04" # 为 Linux 构建 (Tauri v1 可使用 ubuntu-20.04)
                    #   args: ""
                    - platform: "windows-latest" # 为 Windows 构建
                      target: "x86_64-pc-windows-msvc"

        runs-on: ${{ matrix.platform }} # 使用 matrix 中定义的平台
        steps:
            - name: Checkout repository # 检出代码
              uses: actions/checkout@v4

            - name: Install rust target
              run: rustup target add ${{ matrix.target }}

            - name: Rust setup # 设置 Rust 环境
              uses: dtolnay/rust-toolchain@stable

            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: target

            - name: Install pnpm # 全局安装 pnpm
              run: npm install -g pnpm

            - name: Sync node version and setup cache # 同步 Node 版本并设置缓存
              uses: actions/setup-node@v4
              with:
                  node-version: "lts/*" # 使用最新的 LTS 版本
                  cache: "pnpm" # 设置 pnpm 缓存 (可选 npm 或 yarn)

            - name: install dependencies (ubuntu only) # 仅 Ubuntu 需要安装系统依赖
              if: matrix.platform == 'ubuntu-22.04' # 必须与上面定义的平台值匹配
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            - name: Install frontend dependencies # 安装前端依赖
              # 如果没有配置 beforeBuildCommand，也可以在这里构建前端
              run: pnpm install --no-frozen-lockfile # 使用 pnpm 安装依赖 (可选 npm 或 yarn)

            - name: Build the app # 构建应用程序
              id: build
              uses: tauri-apps/tauri-action@v0 # 使用 Tauri 官方构建 action
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub 访问令牌
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }} # 签名私钥
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }} # 私钥密码
              with:
                  tagName: ${{ github.ref_name }} # 使用触发工作流的 tag 名称
                  releaseName: "Fates v__VERSION__" # tauri-action 会自动替换 __VERSION__ 为应用版本
                  releaseBody: "See the assets to download and install this version." # 发布说明
                  releaseDraft: true # 创建为草稿版本
                  prerelease: false # 不是预发布版本
                  args: --target ${{ matrix.target }} # 使用 matrix 中定义的构建参数
